#
# Example configuration for OAuth 2 client with security proxy.
# - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

# AuthKit Cookie secret used to secure it.  This secret must be the same as the
# one used in the equivalent services application(s) ini file(s) that serve
# the OpenID Relying Party and SSL authentication service.  This is
# because the cookie is shared between this app and the services app(s)  so that
# a user's OpenID can be communicated between them.
authkitCookieSecret = 5dFZM97jBeWNsZUqee7TDnCrSicehfod
baseURI = http://ice.badc.rl.ac.uk:5002/
beakerSessionKeyName = beaker.session.oauth2client
#beakerSessionKeyName = ndg.security.session

[server:main]
use = egg:Paste#http
#host = 127.0.0.1
host = 0.0.0.0
port = 5002

[pipeline:main]
pipeline = BeakerSessionFilter
           OAuth2Client
           CertificateRequest
           SSLCtxEnvironMiddleware
           NDGSecurityProxy
           CertificateSubjectEnvironMiddleware
           SessionHandlerFilter
           AuthorisationFilter
           App

# This filter sets up a server side session linked to a cookie.  The session
# caches authentication and authorisation state information
[filter:BeakerSessionFilter]
paste.filter_app_factory = beaker.middleware:SessionMiddleware

# Cookie name
beaker.session.key = ndg.oauth.client.session

# WSGI environ key name
environ_key = %(beakerSessionKeyName)s
beaker.session.secret = somesecret
beaker.cache.data_dir = %(here)s/authn/beaker/cache
beaker.session.data_dir = %(here)s/authn/beaker/sessions

#beaker.session.cookie_domain = .localhost

[filter:OAuth2Client]
paste.filter_app_factory = ndg.oauth.client.wsgi.oauth2_client:Oauth2ClientMiddleware.filter_app_factory
oauth2.session_key = %(beakerSessionKeyName)s
oauth2.access_token_type=bearer
oauth2.authentication_trigger = unauthorized
# Default:
#oauth2.oauth2_token_key = oauth2client.token
# OAuth client configuration
oauth2.client_cert = /home/rwilkinson_local/dev/ndg_oauth/certificate/usercert.pem
oauth2.client_key = /home/rwilkinson_local/dev/ndg_oauth/certificate/userkey.pem
oauth2.ca_dir = /home/rwilkinson_local/dev/ndg_oauth/ca
# ca_cert_file = /home/rwilkinson_local/dev/oauthclient/ca.pem
oauth2.client_id=22
# Set scopes that the client will request. If the user authorises them, resource
# requests using any of these scopes will be authorised.
# Scope can contain any printable 7 bit ASCII characters excluding space, '"'
# and '\' - URL encode these characters.
oauth2.scope=/O=STFC/OU=BADC/OU=simpleCA-ice.badc.rl.ac.uk/OU=badc.rl.ac.uk/CN=test.client
# OAuth authorization server URLs
oauth2.authorization_endpoint=https://ice.badc.rl.ac.uk:443/oas/oauth/authorize
oauth2.access_token_endpoint=https://ice.badc.rl.ac.uk:443/oas/oauth/access_token
#oauth2.authorization_endpoint=https://ice.badc.rl.ac.uk:5000/oauth/authorize
#oauth2.access_token_endpoint=https://ice.badc.rl.ac.uk:5000/oauth/access_token
# Relative base path included in OAuth client URLs
oauth2.base_url_path=/oauth2

[filter:CertificateRequest]
paste.filter_app_factory =  ndg.oauth.client.wsgi.certificate_request:CertificateRequestMiddleware
certreq.session_key = %(beakerSessionKeyName)s
# Default:
#certreq.oauth2_token_key = oauth2client.token
# OAuth client configuration
certreq.client_cert = /home/rwilkinson_local/dev/ndg_oauth/certificate/usercert.pem
certreq.client_key = /home/rwilkinson_local/dev/ndg_oauth/certificate/userkey.pem
certreq.ca_dir = /home/rwilkinson_local/dev/ndg_oauth/ca
# ca_cert_file = /home/rwilkinson_local/dev/oauthclient/ca.pem
# OAuth authorization server URLs
certreq.resource_server_url=https://ice.badc.rl.ac.uk:443/oas/oauth/request_certificate
#certreq.resource_server_url=https://ice.badc.rl.ac.uk:5000/oauth/request_certificate


[filter:SSLCtxEnvironMiddleware]
paste.filter_app_factory = ndg.security.server.wsgi.client_proxy.environ_certificate:SSLCtxEnvironMiddleware.filter_app_factory
ssl_ctx.certEnvKeyName = oauth2client.token
#ssl_ctx.ctxEnvKeyName = ssl_ctx
#ssl_ctx.caCertFilePath = 
ssl_ctx.caCertDir = /home/rwilkinson_local/dev/ndg_oauth/ca
#ssl_ctx.verifyPeer = True

[filter:NDGSecurityProxy]
paste.filter_app_factory = ndg.security.server.wsgi.client_proxy.environ_certificate:NDGSecurityProxyMiddleware.filter_app_factory
# This must be set to the fully qualified domain name of the host and port on
# which this application stack is listening, when running under mod_wsgi. A
# comma separated list can be specified. (When using paste, the values can be
# detected and this option need not be set.)
#ndg_security_proxy.localAddresses = ice.badc.rl.ac.uk:5002
#ndg_security_proxy.proxy.ctxEnvKeyName = ssl_ctx
# Proxy settings for requests forwarded by the security proxy.
# These can be specified here to override values set in environment variables
# needed to direct requests through the proxy.
ndg_security_proxy.proxy.http_proxy = http://wwwcache.rl.ac.uk:8080
ndg_security_proxy.proxy.https_proxy = http://wwwcache.rl.ac.uk:8080
ndg_security_proxy.proxy.no_proxy = ice.badc.rl.ac.uk

################################################################################

[filter:CertificateSubjectEnvironMiddleware]
paste.filter_app_factory = ndg.security.server.wsgi.client_proxy.environ_certificate:CertificateSubjectEnvironMiddleware.filter_app_factory
cert_subject.certEnvKeyName = oauth2client.token
#cert_subject.remoteUserKeyName = REMOTE_USER

########################################

[filter:SessionHandlerFilter]
paste.filter_app_factory=ndg.security.server.wsgi.session:SessionHandlerMiddleware.filter_app_factory

# Default URI to return to if middleware wasn't able to set via HTTP_REFERER or
# passed return to query argument
sessionHandler.defaultLogoutReturnToURI = %(baseURI)s
sessionHandler.sessionKey = %(beakerSessionKeyName)s
sessionHandler.signoutPath = /logout

########################################

#
# Authorisation filter contains a Policy Enforcement Point which enforces access
# control decisions made by a separate Authorisation Service 
[filter:AuthorisationFilter]
# XACML-SAML Profile:
paste.filter_app_factory=ndg.security.server.wsgi.authz:XACMLAuthorisationFilter.filter_app_factory
# SAML requests and responses:
#paste.filter_app_factory=ndg.security.server.wsgi.authz:AuthorisationFilter.filter_app_factory

# Result handler handles the response for HTTP 403 responses set by the 
# application or the PEP.
resultHandler = ndg.security.server.wsgi.authz.result_handler.genshi.GenshiPEPResultHandlerMiddleware
#resultHandler.staticContentDir = %(here)s/ndg-security/pep_result_handler
resultHandler.baseURL = %(baseURI)s
resultHandler.staticContentDir = %(here)s/pep_result_handler
resultHandler.heading = Access Denied
resultHandler.templateRootDir = %(here)s/pep_result_handler/templates
resultHandler.footerText = CEDA WPS Service

# Settings for the PEP (Policy Enforcement Point)
pep.sessionKey = %(beakerSessionKeyName)s
# Production authorisation service
#pep.authzServiceURI =  https://sandstorm.ceda.ac.uk/AuthorisationService/2/
# Test authorisation service
#pep.authzServiceURI = https://pampero.badc.rl.ac.uk/AuthorisationService/wps/
#pep.authzServiceURI = https://pampero.badc.rl.ac.uk/AuthzXsp/AuthorisationService/
pep.authzServiceURI = https://ice.badc.rl.ac.uk/authz/AuthorisationService/
# This cannot be enabled currently for XACMLAuthorisationFilter:
pep.cacheDecisions = False
pep.subjectIdFormat = urn:esg:openid

# Including this setting activates a simple PDP local to this PEP which filters 
# requests to cut down on calls to the authorisation service.  This is useful
# for example to avoid calling the authorisation service for non-secure content
# such as HTML CSS or graphics.  Note that filters based on resource URI 
# requested alone.  Subject, action and environment settings are not passed in 
# the request context to the local PDP.
#
# The policy content should be set carefully to avoid unintended override of the
# authorisation service's policy
pep.localPolicyFilePath = %(here)s/ndg-security/request-filter.xml

# Settings for Policy Information Point used by the Policy Decision Point to
# retrieve subject attributes from the Attribute Authority associated with the
# resource to be accessed

# If omitted, DN of SSL Cert is used
pep.authzDecisionQuery.issuerName = /C=GB/O=Science and Technology Facilities Council/OU=RAL-SPBU/CN=ceda-wps1.badc.rl.ac.uk
pep.authzDecisionQuery.issuerFormat = urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName
# This is a pep parameter when using XACML profile:
#pep.authzDecisionQuery.subjectIdFormat = urn:esg:openid
pep.authzDecisionQuery.clockSkewTolerance = 2.
pep.authzDecisionQuery.sslCACertDir=/home/rwilkinson_local/dev/wsgi/certificates
pep.authzDecisionQuery.sslCertFilePath=/home/rwilkinson_local/dev/wsgi/certificates/ice.badc.rl.ac.uk.crt
pep.authzDecisionQuery.sslPriKeyFilePath=/home/rwilkinson_local/dev/wsgi/certificates/ice.badc.rl.ac.uk.key
#pep.authzDecisionQuery.sslCACertDir=/etc/grid-security/certificates
#pep.authzDecisionQuery.sslCertFilePath=/usr/local/apache2/conf/ssl.crt/ceda-wps1.badc.rl.ac.uk.crt
#pep.authzDecisionQuery.sslPriKeyFilePath=/usr/local/apache2/conf/ssl.key/ceda-wps1.badc.rl.ac.uk.key

#############################################################################

[app:App]
paste.app_factory = ndg.oauth.client.examples.wsgi.get_url_app:GetUrlApp.app_factory
url = http://ice.badc.rl.ac.uk:8080/thredds/dodsC/test/testData.nc.ascii

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false


# Logging configuration
[loggers]
keys = root, routes, test1, ndgoauthclient

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = DEBUG
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_test1]
level = DEBUG
handlers =
qualname = test1

[logger_ndgoauthclient]
level = DEBUG
handlers =
qualname = ndg.oauth.client

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)s
datefmt = %H:%M:%S
