#
# Description: NDG Security configuration to secure a given WSGI application.  
#              Security filters placed in front of the application in the WSGI 
#              pipeline act as client to security services running on a separate
#              application stack.  - See 
#              ndg.security.server.test.integration.full_system or the 
#              ndgsecurity_services template.
#
# NERC DataGrid
#
# Author: P J Kershaw
#
# Date: 01/07/09
#
# Copyright: STFC 2011
#
# Licence: BSD
#
# The %(here)s variable will be replaced with the parent directory of this file
#
[DEFAULT]
beakerSessionKeyName = beaker.session.ndg.security
testConfigDir = %(here)s/../../config
portNum = 7080
baseURI = http://localhost:%(portNum)s/

# AuthKit Cookie secret used to secure it.  This secret must be the same as the
# one used in the equivalent services application(s) ini file(s) that serve
# the OpenID Relying Party and SSL authentication service.  This is
# because the cookie is shared between this app and the services app(s)  so that
# a user's OpenID can be communicated between them.
authkitCookieSecret = XlkknvzDBG16BTnYYbupNg==

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = %(portNum)s

# Security filters are arranged in serial ahead of the application to be 
# secured
[pipeline:main]
pipeline = BeakerSessionFilter AuthenticationFilter AuthorisationFilter App

# This is the application to be secured.  In this case it's a test harness for
# checking the various aspects of the security filters' functionality.  Replace
# this with the required application for a production system
[app:App]
paste.app_factory = ndg.security.server.test.integration:AuthZTestApp.app_factory

#
# This filter sets up a server side session linked to a cookie.  The session
# caches authentication and authorisation state information
[filter:BeakerSessionFilter]
paste.filter_app_factory = beaker.middleware:SessionMiddleware

# Cookie name
beaker.session.key = ndg.security.session

# WSGI environ key name
environ_key = %(beakerSessionKeyName)s
beaker.session.secret = rBIvKXLa+REYB8pM/8pdPoorVpKQuaOW
beaker.cache.data_dir = %(here)s/authn/beaker/cache
beaker.session.data_dir = %(here)s/authn/beaker/sessions

#beaker.session.cookie_domain = .localhost

#
# This filter redirects unauthenticated requests to a separate authentication
# service listening on another port - typically 443 so that it can host an
# SSL client authentication filter
[filter:AuthenticationFilter]
paste.filter_app_factory = ndg.security.server.wsgi.authn:AuthenticationMiddleware
prefix = authN.

# Set redirect for OpenID Relying Party in the Security Services app instance
authN.redirectURI = https://localhost:7443/verify

# ... or use dj_security app
#authN.redirectURI = http://localhost:8000/account/signin/

# Set return to URI HTTP query argument name - the value of this argument tells 
# the authentication service where to redirect back to following successful
# authentication.  It defaults to 'ndg.security.r' but can be overridden for
# compatibility with other authentication service implementations e.g. 
# dj_security which uses simply 'r' as the argument name.
#authN.return2uri_argname = r

# service which URI to redirect back to following
# Default URI to return to if middleware wasn't able to set via HTTP_REFERER or
# passed return to query argument
authN.sessionHandler.defaultLogoutReturnToURI = %(baseURI)s

# AuthKit Set-up
authkit.setup.method=cookie

# This cookie name and secret MUST agree with the name used by the security web
# services app - see DEFAULT section above
#authkit.cookie.name = ndg.security.auth
authkit.cookie.name = ceda.session.2
authkit.cookie.secret = %(authkitCookieSecret)s
authkit.cookie.signoutpath = /logout

# Disable inclusion of client IP address from cookie signature due to 
# suspected problem with AuthKit setting it when a HTTP Proxy is in place
#authkit.cookie.includeip = False
authkit.cookie.includeip = True

#authkit.cookie.params.expires = 2
#authkit.cookie.params.domain = .localhost

# environ key name for beaker session
authkit.session.middleware = %(beakerSessionKeyName)s

#
# Authorisation filter contains a Policy Enforcement Point which enforces access
# control decisions made by a separate Authorisation Service 
[filter:AuthorisationFilter]
paste.filter_app_factory=ndg.security.server.wsgi.authz:AuthorisationFilter.filter_app_factory

# Result handler handles the response for HTTP 403 responses set by the 
# application or the PEP.
resultHandler = ndg.security.server.wsgi.authz.result_handler.genshi.GenshiPEPResultHandlerMiddleware
resultHandler.staticContentDir = %(here)s/pep_result_handler
resultHandler.heading = NDG Security Integration Tests

# Settings for the PEP (Policy Enforcement Point)
pep.sessionKey = beaker.session.ndg.security
pep.authzServiceURI = https://localhost:7443/AuthorisationService
pep.cacheDecisions = True

# Including this setting activates a simple PDP local to this PEP which filters 
# requests to cut down on calls to the authorisation service.  This is useful
# for example to avoid calling the authorisation service for non-secure content
# such as HTML CSS or graphics.  Note that filters based on resource URI 
# requested alone.  Subject, action and environment settings are not passed in 
# the request context to the local PDP.
#
# The policy content should be set carefully to avoid unintended override of the
# authorisation service's policy
#pep.localPolicyFilePath = %(here)s/request-filter.xml
pep.ignore_file_list_pat = ^http://localhost:7080/layout/.* 
	^http://localhost:7080/favicon.ico

# Settings for Policy Information Point used by the Policy Decision Point to
# retrieve subject attributes from the Attribute Authority associated with the
# resource to be accessed

# If omitted, DN of SSL Cert is used
pep.authz_decision_query.issuer.value = /O=NDG/OU=BADC/CN=test
pep.authz_decision_query.issuer.format = urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName
pep.authz_decision_query.subject.nameID.format = urn:esg:openid
pep.authz_decision_query_binding.clockSkewTolerance = 0.
pep.authz_decision_query_binding.sslCACertDir=%(testConfigDir)s/pki/ca
pep.authz_decision_query_binding.sslCertFilePath=%(testConfigDir)s/pki/localhost.crt
pep.authz_decision_query_binding.sslPriKeyFilePath=%(testConfigDir)s/pki/localhost.key

# Logging configuration
[loggers]
keys = root, ndg

[handlers]
keys = console, logfile

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_ndg]
level = DEBUG
handlers =
qualname = ndg

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s.%(msecs)03d %(levelname)-7.7s [%(name)s:%(lineno)s] %(message)s
datefmt = %Y-%m-%d-%H:%M:%S

[handler_logfile]
class = handlers.RotatingFileHandler
level=NOTSET
formatter=generic
args=(os.path.join('./', 'log', 'service.log'), 'a', 50000, 2)